#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var CleanCSS = require('../index');

var commands = require('commander');

var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
var buildVersion = JSON.parse(packageConfig).version;

var isWindows = process.platform == 'win32';

// Specify commander options to parse command line params correctly
commands
  .version(buildVersion, '-v, --version')
  .usage('[options] source-file, [source-file, ...]')
  .option('-b, --keep-line-breaks', 'Keep line breaks')
  .option('-c, --compatibility [ie7|ie8]', 'Force compatibility mode (see Readme for advanced examples)')
  .option('-d, --debug', 'Shows debug information (minification time & compression efficiency)')
  .option('-o, --output [output-file]', 'Use [output-file] as output instead of STDOUT')
  .option('--beautify', 'Formats output CSS by using indentation and one rule or property per line')
  .option('--inline [rules]', 'Enables inlining for listed sources (defaults to `local`)')
  .option('--inline-timeout [seconds]', 'Per connection timeout when fetching remote stylesheets (defaults to 5 seconds)', parseFloat)
  .option('--rounding-precision [n]', 'Rounds pixel values to `N` decimal places. -1 disables rounding (defaults to -1)')
  .option('--s0', 'Remove all special comments, i.e. /*! comment */')
  .option('--s1', 'Remove all special comments but the first one')
  .option('--semantic-merging', 'Enables unsafe mode by assuming BEM-like semantic stylesheets (warning, this may break your styling!)')
  .option('--skip-advanced', 'Disable advanced optimizations - ruleset reordering & merging')
  .option('--skip-aggressive-merging', 'Disable properties merging based on their order')
  .option('--skip-media-merging', 'Disable @media merging')
  .option('--skip-rebase', 'Disable URLs rebasing')
  .option('--skip-restructuring', 'Disable restructuring optimizations')
  .option('--skip-shorthand-compacting', 'Disable shorthand compacting')
  .option('--source-map', 'Enables building input\'s source map')
  .option('--source-map-inline-sources', 'Enables inlining sources inside source maps');

commands.on('--help', function () {
  console.log('  Examples:\n');
  console.log('    %> cleancss one.css');
  console.log('    %> cleancss -o one-min.css one.css');
  if (isWindows) {
    console.log('    %> type one.css two.css three.css | cleancss -o merged-and-minified.css');
  } else {
    console.log('    %> cat one.css two.css three.css | cleancss -o merged-and-minified.css');
    console.log('    %> cat one.css two.css three.css | cleancss | gzip -9 -c > merged-minified-and-gzipped.css.gz');
  }
  console.log('');
  process.exit();
});

commands.parse(process.argv);

// If no sensible data passed in just print help and exit
var fromStdin = !process.env.__DIRECT__ && !process.stdin.isTTY;
if (!fromStdin && commands.args.length === 0) {
  commands.outputHelp();
  return 0;
}

// Now coerce commands into CleanCSS configuration...
var debugMode = commands.debug;
var options = {
  advanced: commands.skipAdvanced ? false : true,
  aggressiveMerging: commands.skipAggressiveMerging ? false : true,
  beautify: commands.beautify,
  compatibility: commands.compatibility,
  inline: commands.inline || 'local',
  inlineTimeout: commands.inlineTimeout * 1000,
  keepBreaks: !!commands.keepLineBreaks,
  keepSpecialComments: commands.s0 ? 0 : (commands.s1 ? 1 : '*'),
  mediaMerging: commands.skipMediaMerging ? false : true,
  output: commands.output,
  rebase: commands.skipRebase ? false : true,
  rebaseTo: ('output' in commands) && commands.output.length > 0 ? path.dirname(path.resolve(commands.output)) : process.cwd(),
  restructuring: commands.skipRestructuring ? false : true,
  roundingPrecision: commands.roundingPrecision,
  semanticMerging: commands.semanticMerging ? true : false,
  shorthandCompacting: commands.skipShorthandCompacting ? false : true,
  sourceMap: commands.sourceMap,
  sourceMapInlineSources: commands.sourceMapInlineSources
};

if (options.sourceMap && !options.output) {
  outputFeedback(['Source maps will not be built because you have not specified an output file.'], true);
  options.sourceMap = false;
}

// ... and do the magic!
if (commands.args.length > 0) {
  minify(commands.args);
} else {
  var stdin = process.openStdin();
  stdin.setEncoding('utf-8');
  var data = '';
  stdin.on('data', function (chunk) {
    data += chunk;
  });
  stdin.on('end', function () {
    minify(data);
  });
}

function minify(data) {
  new CleanCSS(options).minify(data, function (errors, minified) {
    if (debugMode) {
      console.error('Original: %d bytes', minified.stats.originalSize);
      console.error('Minified: %d bytes', minified.stats.minifiedSize);
      console.error('Efficiency: %d%', ~~(minified.stats.efficiency * 10000) / 100.0);
      console.error('Time spent: %dms', minified.stats.timeSpent);

      if (minified.inlinedStylesheets.length > 0) {
        console.error('Inlined stylesheets:');
        minified.inlinedStylesheets.forEach(function (uri) {
          console.error('- %s', uri);
        });
      }
    }

    outputFeedback(minified.errors, true);
    outputFeedback(minified.warnings);

    if (minified.errors.length > 0) {
      process.exit(1);
    }

    if (minified.sourceMap) {
      var mapFilename = path.basename(options.output) + '.map';
      output(minified.styles + '/*# sourceMappingURL=' + mapFilename + ' */');
      outputMap(minified.sourceMap, mapFilename);
    } else {
      output(minified.styles);
    }
  });
}

function output(minified) {
  if (options.output) {
    fs.writeFileSync(options.output, minified, 'utf8');
  } else {
    process.stdout.write(minified);
  }
}

function outputMap(sourceMap, mapFilename) {
  var mapPath = path.join(path.dirname(options.output), mapFilename);
  fs.writeFileSync(mapPath, sourceMap.toString(), 'utf-8');
}

function outputFeedback(messages, isError) {
  var prefix = isError ? '\x1B[31mERROR\x1B[39m:' : 'WARNING:';

  messages.forEach(function (message) {
    console.error('%s %s', prefix, message);
  });
}
