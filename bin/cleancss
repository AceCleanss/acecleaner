#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var CleanCSS = require('../index');

var commands = require('commander');

var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
var buildVersion = JSON.parse(packageConfig).version;

// Specify commander options to parse command line params correctly
commands
  .version(buildVersion, '-v, --version')
  .usage('[options] <source-file ...>')
  .option('-b, --keep-line-breaks', 'Keep line breaks')
  .option('-c, --compatibility [ie7|ie8]', 'Force compatibility mode (see Readme for advanced examples)')
  .option('-d, --debug', 'Shows debug information (minification time & compression efficiency)')
  .option('-o, --output [output-file]', 'Use [output-file] as output instead of STDOUT')
  .option('-O <n> [optimizations]', 'Turn on level <n> optimizations; optionally accepts a list of fine-grained options, defaults to `1`, see examples below', function (val) { return Math.abs(parseInt(val)); })
  .option('--beautify', 'Formats output CSS by using indentation and one rule or property per line')
  .option('--inline [rules]', 'Enables inlining for listed sources (defaults to `local`)')
  .option('--inline-timeout [seconds]', 'Per connection timeout when fetching remote stylesheets (defaults to 5 seconds)', parseFloat)
  .option('--skip-aggressive-merging', 'Disable properties merging based on their order')
  .option('--skip-rebase', 'Disable URLs rebasing')
  .option('--source-map', 'Enables building input\'s source map')
  .option('--source-map-inline-sources', 'Enables inlining sources inside source maps');

commands.on('--help', function () {
  console.log('  Examples:\n');
  console.log('    %> cleancss one.css');
  console.log('    %> cleancss -o one-min.css one.css');
  console.log('    %> cleancss -o merged-and-minified.css one.css two.css three.css');
  console.log('    %> cleancss one.css two.css three.css | gzip -9 -c > merged-minified-and-gzipped.css.gz');
  console.log('');
  console.log('  Level 0 optimizations:');
  console.log('    %> cleancss -O0 one.css');
  console.log('');
  console.log('  Level 1 optimizations:');
  console.log('    %> cleancss -O1 one.css');
  console.log('    %> cleancss -O1 removeQuotes:off;roundingPrecision:4;specialComments:1 one.css');
  console.log('    %> cleancss -O1 all:off;specialComments:1 one.css');
  console.log('    %> # `cleanupCharsets` controls `@charset` moving to the front of a stylesheet; defaults to `on`');
  console.log('    %> # `normalizeUrls` controls URL normalzation; default to `on`');
  console.log('    %> # `optimizeBackground` controls `background` property optimizatons; defaults to `on`');
  console.log('    %> # `optimizeBorderRadius` controls `border-radius` property optimizatons; defaults to `on`');
  console.log('    %> # `optimizeFilter` controls `filter` property optimizatons; defaults to `on`');
  console.log('    %> # `optimizeFont controls `font` property optimizatons; defaults to `on` ');
  console.log('    %> # `optimizeFontWeight` controls `font-weight` property optimizatons; defaults to `on`');
  console.log('    %> # `optimizeOutline` controls `outline` property optimizatons; defaults to `on`');
  console.log('    %> # `removeNegativePaddings` controls removing negative paddings; defaults to `on`');
  console.log('    %> # `removeQuotes` controls removing quotes when unnecessary; defaults to `on`');
  console.log('    %> # `removeWhitespace` controls removing unused whitespace; defaults to `on`');
  console.log('    %> # `replaceMultipleZeros` contols removing redundant zeros; defaults to `on`');
  console.log('    %> # `replaceTimeUnits` controls replacing time units with shorter values; defaults to `on');
  console.log('    %> # `replaceZeroUnits` controls replacing zero values with units; defaults to `on`');
  console.log('    %> # `roundingPrecision` rounds pixel values to `N` decimal places; `off` disables rounding; defaults to `off`');
  console.log('    %> # `specialComments` denotes a number of /*! ... */ comments preserved; defaults to `all`');
  console.log('    %> # `tidyAtRules` controls at-rules (e.g. `@charset`, `@import`) optimizing; defaults to `on`');
  console.log('    %> # `tidyBlockScopes` controls block scopes (e.g. `@media`) optimizing; defaults to `on`');
  console.log('    %> # `tidySelectors` controls selectors optimizing; defaults to `on`');
  console.log('');
  console.log('  Level 2 optimizations:');
  console.log('    %> cleancss -O2 one.css');
  console.log('    %> cleancss -O2 mediaMerging:off;restructuring:off;semanticMerging:on;shorthandCompacting:off one.css');
  console.log('    %> cleancss -O2 all:off;duplicateRulesRemoving:on one.css');
  console.log('    %> # `adjacentRulesMerging` controls adjacent rules merging; defaults to `on`');
  console.log('    %> # `duplicateFontRulesRemoving` controls duplicate `@font-face` removing; defaults to `on`');
  console.log('    %> # `duplicateMediaRemoving` controls duplicate `@media` removing; defaults to `on`');
  console.log('    %> # `duplicateRulesRemoving` controls duplicate rules removing; defaults to `on`');
  console.log('    %> # `mediaMerging` controls `@media` merging; defaults to `on`');
  console.log('    %> # `nonAdjacentRulesMerging` controls non-adjacent rule merging; defaults to `on`');
  console.log('    %> # `nonAdjacentRulesReducing` controls non-adjacent rule reducing; defaults to `on`');
  console.log('    %> # `restructuring` controls content restructuring; defaults to `off`');
  console.log('    %> # `semanticMerging` controls semantic merging; defaults to `off`');
  console.log('    %> # `shorthandCompacting` controls shorthand compacting; defaults to `on`');

  process.exit();
});

commands.parse(process.argv);

if (commands.rawArgs.indexOf('-O0') > -1) {
  commands.O0 = true;
}

if (commands.rawArgs.indexOf('-O1') > -1) {
  commands.O1 = findArgumentTo('-O1', commands.rawArgs, commands.args);
}

if (commands.rawArgs.indexOf('-O2') > -1) {
  commands.O2 = findArgumentTo('-O2', commands.rawArgs, commands.args);
}

// If no sensible data passed in just print help and exit
var fromStdin = !process.env.__DIRECT__ && !process.stdin.isTTY;
if (!fromStdin && commands.args.length === 0) {
  commands.outputHelp();
  return 0;
}

// Now coerce commands into CleanCSS configuration...
var debugMode = commands.debug;
var options = {
  aggressiveMerging: commands.skipAggressiveMerging ? false : true,
  beautify: commands.beautify,
  compatibility: commands.compatibility,
  inline: commands.inline || 'local',
  inlineTimeout: commands.inlineTimeout * 1000,
  keepBreaks: !!commands.keepLineBreaks,
  level: commands.O0 || commands.O1 || commands.O2 ?
    { '0': commands.O0, '1': commands.O1, '2': commands.O2 } :
    undefined,
  output: commands.output,
  rebase: commands.skipRebase ? false : true,
  rebaseTo: ('output' in commands) && commands.output.length > 0 ? path.dirname(path.resolve(commands.output)) : process.cwd(),
  sourceMap: commands.sourceMap,
  sourceMapInlineSources: commands.sourceMapInlineSources
};

if (options.sourceMap && !options.output) {
  outputFeedback(['Source maps will not be built because you have not specified an output file.'], true);
  options.sourceMap = false;
}

// ... and do the magic!
if (commands.args.length > 0) {
  minify(commands.args);
} else {
  var stdin = process.openStdin();
  stdin.setEncoding('utf-8');
  var data = '';
  stdin.on('data', function (chunk) {
    data += chunk;
  });
  stdin.on('end', function () {
    minify(data);
  });
}

function findArgumentTo(option, rawArgs, args) {
  var value = true;
  var optionAt = rawArgs.indexOf(option);
  var nextOption = rawArgs[optionAt + 1];
  var looksLikePath;
  var asArgumentAt;

  if (!nextOption) {
    return value;
  }

  looksLikePath = nextOption.indexOf('.css') > -1 ||
    /\//.test(nextOption) ||
    /\\[^\-]/.test(nextOption) ||
    /^https?:\/\//.test(nextOption);
  asArgumentAt = args.indexOf(nextOption);

  if (!looksLikePath) {
    value = nextOption;
  }

  if (!looksLikePath && asArgumentAt > -1) {
    args.splice(asArgumentAt, 1);
  }

  return value;
}

function minify(data) {
  new CleanCSS(options).minify(data, function (errors, minified) {
    if (debugMode) {
      console.error('Original: %d bytes', minified.stats.originalSize);
      console.error('Minified: %d bytes', minified.stats.minifiedSize);
      console.error('Efficiency: %d%', ~~(minified.stats.efficiency * 10000) / 100.0);
      console.error('Time spent: %dms', minified.stats.timeSpent);

      if (minified.inlinedStylesheets.length > 0) {
        console.error('Inlined stylesheets:');
        minified.inlinedStylesheets.forEach(function (uri) {
          console.error('- %s', uri);
        });
      }
    }

    outputFeedback(minified.errors, true);
    outputFeedback(minified.warnings);

    if (minified.errors.length > 0) {
      process.exit(1);
    }

    if (minified.sourceMap) {
      var mapFilename = path.basename(options.output) + '.map';
      output(minified.styles + '/*# sourceMappingURL=' + mapFilename + ' */');
      outputMap(minified.sourceMap, mapFilename);
    } else {
      output(minified.styles);
    }
  });
}

function output(minified) {
  if (options.output) {
    fs.writeFileSync(options.output, minified, 'utf8');
  } else {
    process.stdout.write(minified);
  }
}

function outputMap(sourceMap, mapFilename) {
  var mapPath = path.join(path.dirname(options.output), mapFilename);
  fs.writeFileSync(mapPath, sourceMap.toString(), 'utf-8');
}

function outputFeedback(messages, isError) {
  var prefix = isError ? '\x1B[31mERROR\x1B[39m:' : 'WARNING:';

  messages.forEach(function (message) {
    console.error('%s %s', prefix, message);
  });
}
