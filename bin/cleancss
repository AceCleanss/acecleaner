#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var CleanCSS = require('../index');

var commands = require('commander');

var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
var buildVersion = JSON.parse(packageConfig).version;

// Specify commander options to parse command line params correctly
commands
  .version(buildVersion, '-v, --version')
  .usage('[options] <source-file ...>')
  .option('-b, --keep-line-breaks', 'Keep line breaks')
  .option('-c, --compatibility [ie7|ie8]', 'Force compatibility mode (see Readme for advanced examples)')
  .option('-d, --debug', 'Shows debug information (minification time & compression efficiency)')
  .option('-o, --output [output-file]', 'Use [output-file] as output instead of STDOUT')
  .option('--O0', 'Turn on level 0 optimizations')
  .option('--O1 [optimizations]', 'Turn on level 1 optimizations (default), see examples below')
  .option('--O2 [optimizations]', 'Turn on level 2 optimizations, see examples below')
  .option('--beautify', 'Formats output CSS by using indentation and one rule or property per line')
  .option('--inline [rules]', 'Enables inlining for listed sources (defaults to `local`)')
  .option('--inline-timeout [seconds]', 'Per connection timeout when fetching remote stylesheets (defaults to 5 seconds)', parseFloat)
  .option('--skip-aggressive-merging', 'Disable properties merging based on their order')
  .option('--skip-rebase', 'Disable URLs rebasing')
  .option('--source-map', 'Enables building input\'s source map')
  .option('--source-map-inline-sources', 'Enables inlining sources inside source maps');

commands.on('--help', function () {
  console.log('  Examples:\n');
  console.log('    %> cleancss one.css');
  console.log('    %> cleancss -o one-min.css one.css');
  console.log('    %> cleancss -o merged-and-minified.css one.css two.css three.css');
  console.log('    %> cleancss one.css two.css three.css | gzip -9 -c > merged-minified-and-gzipped.css.gz');
  console.log('');
  console.log('  Level 0 optimizations:');
  console.log('    %> cleancss --O0 one.css');
  console.log('');
  console.log('  Level 1 optimizations:');
  console.log('    %> cleancss --O1 one.css');
  console.log('    %> cleancss --O1 roundingPrecision:4;specialComments:1 one.css');
  console.log('    %> # `roundingPrecision` rounds pixel values to `N` decimal places; `off` disables rounding; defaults to `off`');
  console.log('    %> # `specialComments` denotes a number of /*! ... */ comments preserved; defaults to `all`');
  console.log('');
  console.log('  Level 2 optimizations:');
  console.log('    %> cleancss --O2 one.css');
  console.log('    %> cleancss --O2 mediaMerging:off;restructuring:off;semanticMerging:on;shorthandCompacting:off one.css');
  console.log('    %> # `mediaMerging` controls `@media` merging behavior; defaults to `on` (alias to `true`)');
  console.log('    %> # `restructuring` controls content restructuring behavior; defaults to `on` (alias to `true`)');
  console.log('    %> # `semanticMerging` controls semantic merging behavior; defaults to `off` (alias to `false`)');
  console.log('    %> # `shorthandCompacting` controls shorthand compacting behavior; defaults to `on` (alias to `true`)');

  process.exit();
});

commands.parse(process.argv);

// Fixes commander issue in the following case `cleancss --O1 source.css` where `source.css` is taken as `O1` value
if (commands.O1 && (fs.existsSync(commands.O1) || isRemote(commands.O1))) {
  commands.args.unshift(commands.O1);
  commands.O1 = true;
}

// Fixes commander issue in the following case `cleancss --O2 source.css` where `source.css` is taken as `O2` value
if (commands.O2 && (fs.existsSync(commands.O2) || isRemote(commands.O2))) {
  commands.args.unshift(commands.O2);
  commands.O2 = true;
}

// If no sensible data passed in just print help and exit
var fromStdin = !process.env.__DIRECT__ && !process.stdin.isTTY;
if (!fromStdin && commands.args.length === 0) {
  commands.outputHelp();
  return 0;
}

// Now coerce commands into CleanCSS configuration...
var debugMode = commands.debug;
var options = {
  aggressiveMerging: commands.skipAggressiveMerging ? false : true,
  beautify: commands.beautify,
  compatibility: commands.compatibility,
  inline: commands.inline || 'local',
  inlineTimeout: commands.inlineTimeout * 1000,
  keepBreaks: !!commands.keepLineBreaks,
  level: commands.O0 || commands.O1 || commands.O2 ?
    { '0': commands.O0, '1': commands.O1, '2': commands.O2 } :
    undefined,
  output: commands.output,
  rebase: commands.skipRebase ? false : true,
  rebaseTo: ('output' in commands) && commands.output.length > 0 ? path.dirname(path.resolve(commands.output)) : process.cwd(),
  sourceMap: commands.sourceMap,
  sourceMapInlineSources: commands.sourceMapInlineSources
};

if (options.sourceMap && !options.output) {
  outputFeedback(['Source maps will not be built because you have not specified an output file.'], true);
  options.sourceMap = false;
}

// ... and do the magic!
if (commands.args.length > 0) {
  minify(commands.args);
} else {
  var stdin = process.openStdin();
  stdin.setEncoding('utf-8');
  var data = '';
  stdin.on('data', function (chunk) {
    data += chunk;
  });
  stdin.on('end', function () {
    minify(data);
  });
}

function isRemote(uri) {
  return /^(\w+:\/\/|\/\/)/.test(uri);
}

function minify(data) {
  new CleanCSS(options).minify(data, function (errors, minified) {
    if (debugMode) {
      console.error('Original: %d bytes', minified.stats.originalSize);
      console.error('Minified: %d bytes', minified.stats.minifiedSize);
      console.error('Efficiency: %d%', ~~(minified.stats.efficiency * 10000) / 100.0);
      console.error('Time spent: %dms', minified.stats.timeSpent);

      if (minified.inlinedStylesheets.length > 0) {
        console.error('Inlined stylesheets:');
        minified.inlinedStylesheets.forEach(function (uri) {
          console.error('- %s', uri);
        });
      }
    }

    outputFeedback(minified.errors, true);
    outputFeedback(minified.warnings);

    if (minified.errors.length > 0) {
      process.exit(1);
    }

    if (minified.sourceMap) {
      var mapFilename = path.basename(options.output) + '.map';
      output(minified.styles + '/*# sourceMappingURL=' + mapFilename + ' */');
      outputMap(minified.sourceMap, mapFilename);
    } else {
      output(minified.styles);
    }
  });
}

function output(minified) {
  if (options.output) {
    fs.writeFileSync(options.output, minified, 'utf8');
  } else {
    process.stdout.write(minified);
  }
}

function outputMap(sourceMap, mapFilename) {
  var mapPath = path.join(path.dirname(options.output), mapFilename);
  fs.writeFileSync(mapPath, sourceMap.toString(), 'utf-8');
}

function outputFeedback(messages, isError) {
  var prefix = isError ? '\x1B[31mERROR\x1B[39m:' : 'WARNING:';

  messages.forEach(function (message) {
    console.error('%s %s', prefix, message);
  });
}
